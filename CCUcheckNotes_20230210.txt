skip_lv_check system will always check if the front-end is on 
	- to skip, enable this so we can run without the front-end on 
	- when ccus are stuck due to seus, they don't communciate with tkfec and pixelfec, if you need to configure front-end, they will not respond and you can't communicate with them
		-in in part of code in Abbas' talk, you can see part of code responsible for this
		- if ccu is stuck in a run and they want to cnfigure pixel for some reason, the configuration will crash and this is a disaster
		- what we can do is tell system if there is a ccu that isn't communicating to forget about it
		- do this by changing flag to true, and if ccu is stuck in the middle of a run, they will be able to configure
		- don't configure the ccus that have seus (they have old configuration and this should work) and only configure ones with which we have communication
		- can only do one thing - if we can find a way to figure out from logs in the middle of the run which ccus are blocked/have a seu 

		- ways to do this
			- look at log files when there is a crash and try to find which messages you get from this 
			- ask Nicolas and will what they were doing to contact CCUs


look at where ccus are configured - there should be code here to deal with when it isn't configured
this is a loop that resets CCUs (?)
ScanCCU in opstools that can be executed within code - tells if you can communicate with a CCU
	- returns list of all CCUs seen by scan, gives either error or list shorter than total # CCUs 

they were finding that this type of thing crashes POS with some probability 
sometimes scanCCU fails, have to put a reset in at least once (not getting aresponse once doesn't necessarily mean the CCU is stuck) 

problem - sometimes you don't get back what you expect and POS doesn't know how to deal with it


at the end of a fill it would be good to know this because we do stuff and need to reconfigure
in middle of data-taking in case we active the lv_check thing, we are fine unless we try to push a new configuration
how to prevent POS from crashing if there's an exception in the fec loop (?)


tkfec software (external software)  




-scan ring for each FEC to find all CCUs 

//////////////////////////////////////////////////////////////////////////////////////////////////////


  std::list<keyType> *ccuList = NULL ;
  try { 
	     

    // Scan the ring for each FECs and display the CCUs
    //keyType indexFEC = buildFecRingKey(fecAddress,ringAddress);
    //ccuList = fecAccess->getCcuList ( indexFEC, noBroadcast ) ;
    ccuList = fecAccess->getCcuList ( buildFecRingKey(fecAddress,ringAddress), noBroadcast ) ;
        
    if (ccuList != NULL) {

      for (std::list<keyType>::iterator p=ccuList->begin();p!=ccuList->end();p++) {
      
	keyType index = *p ;

	std::cout << std::hex << "FEC 0x" << (int)getFecKey(index) 
	  << " Ring 0x" << (int)getRingKey(index) 
	  << " CCU 0x" << (int)getCcuKey(index)
	  << " found" << std::endl  ;
      }
    }
    else {
     
      o << std::endl << "No CCU found on FECs" << std::endl ;
    }  
  }
  catch (FecExceptionHandler e) {

    o << std::endl << "*********** ERROR ********************************" << std::endl ; 
    o << "An error occurs during hardware access" << std::endl ;
    o << e.what()  << std::endl ;
    o << "**************************************************" << std::endl ;
  }

//////////////////////////////////////////////////////////////////////////////////////////////////////



this will all be done in tkfecsupervisor
find skip_lv_check
	- track this and find how the tkfec knows that the front end is off or on
	- find lnk between tkfec and ccus 

- abbas' idea: ask each ccu for its name and then see if you get a response that makes sense 


-if you're running pos and then try to communicate with a ccu throughs scanccu in another window, this shouldn't crash pos, but resetccu will 

- we changed flag skip_lv_check, all we need to do is see which ccus are not responding
	- we can have an independent script running 24/7 that gets status of ccus 
	- independent of pos

- the skip_lv_check causes another problem  


- what grace wrote has some ineraction with ccus,could look at ther script and see how the script communicates with ccus
	- her script is given a list, then you tell it to connect to specific ccus, so it doesn't scan over all 

- look at nicolas and will's loop (in the tkfecsupervisor) and find out how they were looping over ccus and then which command they used for communication
	- this might still exist in r84 or 83, look in their elog
	- "disable ccu loop"? - called something like this 

